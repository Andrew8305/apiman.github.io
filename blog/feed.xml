<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title></title>
		<description>The apiman project brings an open source development methodology to API Management, coupling a rich API design &amp; configuration layer with a blazingly fast runtime.  This is the official apiman blog, where we discuss....whatever we&#39;re thinking about!
</description>		
		<link>http://apiman.io</link>
		<atom:link href="http://apiman.io/feed.xml" rel="self" type="application/rss+xml" />
		
		
			<item>
				<title>Keycloak and dagger: Securing your services with OAuth2</title>
				
				        <dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author>
				        
				
					<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One great advantage of API Management is centralising auth concerns, thereby avoiding burdensome reimplementation issues and streamlining your security processes. The good news is that you can easily configure apiman to handle many common auth use-cases, such as OAuth2 with our popular Keycloak OAuth2 policy which I&amp;#8217;ll outline in this blogpost.&lt;/p&gt;
&lt;/div&gt;</description>
				
				<pubDate>Tue, 09 Jun 2015 08:25:28 -0400</pubDate>
				<link>http://apiman.io/blog/gateway/security/oauth2/keycloak/authentication/authorization/2015/06/09/keycloak-oauth2.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/gateway/security/oauth2/keycloak/authentication/authorization/2015/06/09/keycloak-oauth2.html</guid>
			</item>
		
		
			<item>
				<title>Setting up your apiman development environment</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				        
				
					<description>&lt;p&gt;For those of you who might be interested in hacking away at some core apiman code,
I thought it might be nice to create a reasonably comprehensive step-by-step
guide.  For the most part everything is straightforward, but there are a copule
of tricks you can use to get up and running fast and to be able to easily
iterate on any changes you make.&lt;/p&gt;

&lt;p&gt;Read on if this sounds like something you want to do!&lt;/p&gt;

</description>
				
				<pubDate>Thu, 04 Jun 2015 05:04:45 -0400</pubDate>
				<link>http://apiman.io/blog/eclipse/development/maven/2015/06/04/dev-environment.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/eclipse/development/maven/2015/06/04/dev-environment.html</guid>
			</item>
		
		
			<item>
				<title>We got the moves like swagger!</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				        
				
					<description>&lt;p&gt;One of the weaknesses we’ve had in apiman until now is that service providers didn’t have
any way to document how to consume their services.  Well that has all changed with version
1.1.3.Final.  Now you can upload a Swagger spec document for your service.  If you do,
consumers will be able to browse your service documentation directly in the apiman UI.&lt;/p&gt;

&lt;p&gt;I think we can all agree that this is a welcome change and really improves the usability
of the system, particularly from the perspective of the application developer (aka the
service consumer).&lt;/p&gt;

</description>
				
				<pubDate>Tue, 02 Jun 2015 05:04:45 -0400</pubDate>
				<link>http://apiman.io/blog/api-manager/swagger/service/ui/2015/06/02/swagger.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/api-manager/swagger/service/ui/2015/06/02/swagger.html</guid>
			</item>
		
		
			<item>
				<title>The JBoss apiman API Manager REST services API</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				        
				
					<description>&lt;p&gt;In this, the third article in our series on apiman, JBoss’ new open source API Management framework, we’ll examine apiman’s API Manager REST services API. apiman’s Management UI utilizes this API in the implementation for all of its user-visible features, and you can also use the same API to automate tasks with apiman.&lt;/p&gt;

</description>
				
				<pubDate>Tue, 19 May 2015 07:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/rest/api/automation/2015/05/19/rest-api.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/rest/api/automation/2015/05/19/rest-api.html</guid>
			</item>
		
		
			<item>
				<title>The JBoss apiman API Manager REST services API</title>
				        
				
					<description>&lt;p&gt;&lt;img src=&quot;/blog/images/2015-06-11/1-apiman-logo.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this, the fourth article in the series on apiman, JBoss’ new API Management framework, we’ll examine how apiman enables you to not just manage services, but implement a layer of security to the services by adding an authentication requirement when clients access a managed service.&lt;/p&gt;

&lt;h2 id=&quot;securing-client-access-to-your-managed-services&quot;&gt;Securing Client Access to your Managed Services&lt;/h2&gt;

&lt;p&gt;As we’ve seen in the previous articles in this series, apiman enables you to govern the usage of the services that it manages by defining policies in the Managament UI that are then applied at runtime by the API Gateway. The apiman API Gateway applies the policy rules that you define to requests that it proxies to the managed service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-06-11/apiman-2.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The OOTB policies that are packaged with apiman enable you to apply a variety of types of controls, including rate limiting (where access to a service is assigned a usage threshold) and black/whitelisting by IP address (where the client’s IP address governs their access to the service).&lt;/p&gt;

&lt;p&gt;However, managing a service with apiman does not automatically make that service secure. Happily, however, apiman provides a policy that enables you to easily set up authentication to control access to your managed service. (Note that this policy governs the clients’ authenticated access to the managed service, and not establishing a secure connection where apiman authenticates the back-end services. In other words, in this article, we’re interested in adding authentication between the blue and pink boxes in the above diagram.)&lt;/p&gt;

&lt;h2 id=&quot;adding-a-basic-authentication-policy-to-a-managed-service&quot;&gt;Adding a BASIC Authentication Policy to a Managed Service&lt;/h2&gt;

&lt;p&gt;apiman is packaged with multiple pre-configured policies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Authorization - Access to services’ resources is controlled by user roles.&lt;/li&gt;
  &lt;li&gt;BASIC Authentication - A username/password is required to access a service.&lt;/li&gt;
  &lt;li&gt;Ignored Resources - Paths to services’ resources that will not be accessible. Requests to these service resource paths return a 404 (not found) error.&lt;/li&gt;
  &lt;li&gt;IP Blacklist - Clients with specific IP address will be blocked from accessing a service.&lt;/li&gt;
  &lt;li&gt;IP Whitelist - And, clients with specific IP address will not  be blocked from accessing a service.&lt;/li&gt;
  &lt;li&gt;Rate Limiting - Access to a service is limited by the number of requests in a defined time period. We demonstrated an example of a rate limiting policy in the first article in this series.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re interested in the BASIC Authentication Policy. Let’s take a closer look. The dialog to add a BASIC authentication policy to a service looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-06-11/apiman-3.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In creating the BASIC policy, we define an Authentication Realm (think of this as an area to be protected, within which usernames and passwords exist) and an optional HTTP header. The optional HTTP header is used to optionally pass the user’s principal to the back-end service through an HTTP header. This is useful if the back-end system needs to know the username of the user calling it (e.g. to do user-specific operation). The “Transport security required” checkbox, if enabled, will cause the policy to fail if a client tries to connect to the service over http. The Policy will only accept credentials over https.&lt;/p&gt;

&lt;p&gt;We’ll keep the Identity Source simple and select “Static Identities” and then define a user. Note that while this static approach is fine for testing purposes, you will want use one of the other Identity Source options (JBDS or LDAP) for a production environment as they can better handle a large number of users.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-06-11/apiman-4.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s important to remember that, in BASIC authentication, one of the factors that makes this, well, basic in nature, is that the username/password that you define are encoded (this is unencrypted base64 encoded text) when they are sent to the server. Since the text is not encrypted, it’s at risk of being copied and then used in an attack. For this reason, it’s safer to select the transport security option to configure SSL encryption.&lt;/p&gt;

&lt;p&gt;To illustrate, here’s Java code that can encode and then decode the username:password string:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Base64.Encoder &lt;span class=&quot;nv&quot;&gt;encoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Base64.getEncoder&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 String &lt;span class=&quot;nv&quot;&gt;normalString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;user1&amp;quot;&lt;/span&gt; + &lt;span class=&quot;s2&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt; + &lt;span class=&quot;s2&quot;&gt;&amp;quot;password1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 String &lt;span class=&quot;nv&quot;&gt;encodedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; encoder.encodeToString&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;normalString.getBytes&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;StandardCharsets.UTF_8&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 System.out.println &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The encoded string is: &amp;quot;&lt;/span&gt; + encodedString&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
             
 Decoder &lt;span class=&quot;nv&quot;&gt;decoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Base64.getDecoder&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 byte&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;unencodedStringArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; decoder.decode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;encodedString&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 String &lt;span class=&quot;nv&quot;&gt;unencodedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new String &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;unencodedStringArray&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 System.out.println &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The unencoded string is: &amp;quot;&lt;/span&gt; + unencodedString&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
   
 The encoded string is: dXNlcjE6cGFzc3dvcmQx  
 The unencoded string is: user1:password1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So - unlike encrypted strings, your encoded username and password strings are not secure!&lt;/p&gt;

&lt;p&gt;## When a Request is made to the Service&lt;/p&gt;

&lt;p&gt;It’s interesting to see step-by-step what happens when a request is made to the service and the BASIC authentication policy is applied. Let’s take a look at the request and the responses. I used the “HttpFox” http analyzer (https://addons.mozilla.org/en-us/firefox/addon/httpfox/) to “listen in” on the requests sent to the server and the responses sent back.&lt;/p&gt;

&lt;p&gt;Here’s the first request made to the service, notice that a username/password is not included.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Request-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; GET /apiman-gateway/serviceProducerOrg/echossl/1.0?apikey&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6f8784cd-5754-47b0-9b8b-b2eb8c5b190f HTTP/1.1  
 Host     localhost:8443  
 User-Agent     Mozilla/5.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;X11&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Linux x86_64&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; rv:24.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Gecko/20100101 Firefox/24.0  
 Accept     text/html,application/xhtml+xml,application/xml&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.9,*/*&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.8  
 Accept-Language     en-US,en&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.5  
 Accept-Encoding     gzip, deflate  
 Cookie     &lt;span class=&quot;nv&quot;&gt;__utma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1348865079.1409020839.1411395889.1419258109.7&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;__utmz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1409020839.1.1.utmcsr&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;utmccn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;utmcmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s_fid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;72CCAD206D09146C-233B60F47DBEA290  
 Connection     keep-alive&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The response, as we expected, shows that the request has triggered an authentication failure. This is due to the authentication requirement that we defined and is being applied by the API Gateway. Note the 401 error code and the reference to BASIC authentication:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     HTTP/1.1 &lt;span class=&quot;m&quot;&gt;401&lt;/span&gt; Unauthorized  
 X-Powered-By     Undertow/1  
 Server     WildFly/8  
 X-Policy-Failure-Type     Authentication  
 Date     Wed, &lt;span class=&quot;m&quot;&gt;03&lt;/span&gt; Jun &lt;span class=&quot;m&quot;&gt;2015&lt;/span&gt; 13:43:26 GMT  
 Connection     keep-alive  
 WWW-Authenticate     BASIC &lt;span class=&quot;nv&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;myRealm&amp;quot;&lt;/span&gt;  
 X-Policy-Failure-Code     &lt;span class=&quot;m&quot;&gt;10004&lt;/span&gt;  
 Content-Type     application/json  
 Content-Length     &lt;span class=&quot;m&quot;&gt;165&lt;/span&gt;  
 X-Policy-Failure-Message     BASIC authentication failed.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The browser then automatically pops up a dialog for us to enter the username and password:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-06-11/apiman-5.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A request is then sent that includes the username and password encoded into a string. In this request, the encoded (but not encrypted) username and password are included:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Request-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     GET /apiman-gateway/serviceProducerOrg/echossl/1.0?apikey&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6f8784cd-5754-47b0-9b8b-b2eb8c5b190f HTTP/1.1  
 Host     localhost:8443  
 User-Agent     Mozilla/5.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;X11&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Linux x86_64&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; rv:24.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Gecko/20100101 Firefox/24.0  
 Accept     text/html,application/xhtml+xml,application/xml&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.9,*/*&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.8  
 Accept-Language     en-US,en&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.5  
 Accept-Encoding     gzip, deflate  
 Cookie     &lt;span class=&quot;nv&quot;&gt;__utma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1348865079.1409020839.1411395889.1419258109.7&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;__utmz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1409020839.1.1.utmcsr&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;utmccn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;utmcmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s_fid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;72CCAD206D09146C-233B60F47DBEA290  
 Connection     keep-alive  
 Authorization     Basic dXNlcjE6cGFzc3dvcmQx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And, then we get the successful return code of 200 in a response:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     HTTP/1.1 &lt;span class=&quot;m&quot;&gt;200&lt;/span&gt; OK  
 Connection     keep-alive  
 X-Powered-By     Undertow/1  
 Server     WildFly/8  
 Content-Length     &lt;span class=&quot;m&quot;&gt;755&lt;/span&gt;  
 Content-Type     application/json  
 Date     Wed, &lt;span class=&quot;m&quot;&gt;03&lt;/span&gt; Jun &lt;span class=&quot;m&quot;&gt;2015&lt;/span&gt; 13:43:34 GMT&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;Just because a service is managed doesn’t automatically make it secure. JBoss apiman provides you with multiple options to add an authentication requirement when clients access your managed service.&lt;/p&gt;

&lt;h2 id=&quot;authors-acknowledgements&quot;&gt;Author’s Acknowledgements&lt;/h2&gt;

&lt;p&gt;As always, the author would like to acknowledge Eric Wittmann and the apiman team for their  review comments and suggestions on writing this post, and for adding new features to apiman!&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;apiman&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://www.apiman.io&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Previous articles in this series:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://java.dzone.com/articles/impatient-new-users&lt;/li&gt;
  &lt;li&gt;http://java.dzone.com/articles/customizing-jboss-apiman&lt;/li&gt;
  &lt;li&gt;http://java.dzone.com/articles/jboss-apiman-api-manager-rest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP Authentication: Basic and Digest Access Authentication&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://tools.ietf.org/html/rfc2617&lt;/li&gt;
&lt;/ul&gt;

</description>
				
				<pubDate>Tue, 19 May 2015 07:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/rest/api/automation/2015/05/19/basic-auth.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/rest/api/automation/2015/05/19/basic-auth.html</guid>
			</item>
		
		
			<item>
				<title>A great way to test your custom apiman policy!</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				        
				
					<description>&lt;p&gt;If you have tried creating your own custom apiman policy, you may have had a little bit of
difficulty creating useful junit tests for it.  Many policies require various apiman
runtime components to be available.  It can be super annoying trying to use something like
mockito to create mock versions of everything your policy needs.  Even for simple policies
you really just want a quick and effective way to test the implementation within a
reasonably “real world” harness.&lt;/p&gt;

&lt;p&gt;Well you’ve probably guessed by now that I’m about to show you how it’s done!  (OK fine,
how it &lt;em&gt;will&lt;/em&gt; be done in the next release of apiman - 1.1.3.Final)&lt;/p&gt;

</description>
				
				<pubDate>Sat, 09 May 2015 05:07:45 -0400</pubDate>
				<link>http://apiman.io/blog/policy/junit/testing/2015/05/09/policy-testing.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/policy/junit/testing/2015/05/09/policy-testing.html</guid>
			</item>
		
		
			<item>
				<title>Authorization: good god, what is it good for?</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				        
				
					<description>&lt;p&gt;Quite a bit, actually.  :)&lt;/p&gt;

&lt;p&gt;I want to talk about how Authorization currently works in apiman, because it’s
a little bit more loosely coupled than you might expect.  Note that at some
point in the future we’re going to be renovating how policies are defined and
configured in the API Manager UI.  But until then, you can refer to this blog
post for an overview of how to configure Authorization!&lt;/p&gt;

</description>
				
				<pubDate>Fri, 08 May 2015 09:15:15 -0400</pubDate>
				<link>http://apiman.io/blog/authorization/authentication/policy/2015/05/08/authorization.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/authorization/authentication/policy/2015/05/08/authorization.html</guid>
			</item>
		
		
			<item>
				<title>Customizing JBoss apiman Through Policy Plugins</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				        
				
					<description>&lt;p&gt;This is the second in a series of articles exploring API management with JBoss apiman. The first article
was a general introduction to apiman for impatient users where in only 10 minutes we installed apiman,
created users and organizations, and services, policies, contracts, and applications. In this article,
we’ll take the first step toward customizing apiman by creating new plugins to implement service policies.&lt;/p&gt;

</description>
				
				<pubDate>Fri, 06 Mar 2015 05:22:00 -0500</pubDate>
				<link>http://apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html</guid>
			</item>
		
		
			<item>
				<title>An Impatient New User&#39;s Introduction to API Management with JBoss apiman 1.0</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				        
				
					<description>&lt;p&gt;Software application development models are evolutionary things. New technologies are always being created
and require new approaches. It’s frequently the case today, that a service oriented architecture (SOA) model
is used and that the end product is a software service that can be used by applications. The explosion in
growth of mobile devices has only accelerated this trend. Every new mobile phone sold is another platform
onto which applications are deployed. These applications are often built from services provided from multiple
sources. The applications often consume these services through their APIs.&lt;/p&gt;

&lt;p&gt;OK, that’s all interesting, but why does this matter?&lt;/p&gt;

</description>
				
				<pubDate>Fri, 09 Jan 2015 04:15:00 -0500</pubDate>
				<link>http://apiman.io/blog/introduction/overview/2015/01/09/impatient-new-user.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/introduction/overview/2015/01/09/impatient-new-user.html</guid>
			</item>
		
	</channel>
</rss>
