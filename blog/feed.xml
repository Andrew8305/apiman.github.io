<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apiman blog</title>
    <description>The apiman project brings an open source development methodology to  API Management, coupling a rich API design &amp; configuration layer with a blazingly fast runtime.  This is the official apiman blog, where we discuss....whatever we&#39;re thinking about!
</description>
    <link>http://apiman.io/blog/</link>
    <atom:link href="http://apiman.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 04 Jun 2015 11:48:32 -0400</pubDate>
    <lastBuildDate>Thu, 04 Jun 2015 11:48:32 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>We got the moves like swagger!</title>
        <description>&lt;p&gt;One of the weaknesses we’ve had in apiman until now is that service providers didn’t have
any way to document how to consume their services.  Well that has all changed with version
1.1.3.Final.  Now you can upload a Swagger spec document for your service.  If you do, 
consumers will be able to browse your service documentation directly in the apiman UI.&lt;/p&gt;

&lt;p&gt;I think we can all agree that this is a welcome change and really improves the usability
of the system, particularly from the perspective of the application developer (aka the
service consumer).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;adding-a-service-definition&quot;&gt;Adding a Service Definition&lt;/h2&gt;
&lt;p&gt;As a service provider, the only thing you need to do is add a service definition to your
service.  This is simple - just navigate to the new “Definition” tab in your service.
There you will be able to copy/paste or drag/drop a Swagger spec.  Make sure you set the
definition type to Swagger (JSON), and don’t forget to click Save!&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-swagger-spec&quot;&gt;What is a Swagger spec?&lt;/h2&gt;
&lt;p&gt;So maybe not everyone knows what Swagger is.  Swagger is a way to formally describe a
RESTful web service.  A Swagger spec is a JSON document that describes everything
about your RESTful API, including (but not limited to):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API meta-data such as Name and Description&lt;/li&gt;
  &lt;li&gt;Resource Paths and the Operations/Methods they support&lt;/li&gt;
  &lt;li&gt;Input/Output types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information I recommend navigating to the &lt;a href=&quot;http://swagger.io/&quot;&gt;Swagger Project&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-does-this-help-my-consumers&quot;&gt;How does this help my consumers?&lt;/h2&gt;
&lt;p&gt;Once you’ve got a Swagger spec created and added to your service, your service 
consumers will be able to browse live documentation right from the apiman UI.  This
information will be available via a new “View Service Definition” link available on
the consumer’s “Service Details” page (the same page that consumers are shown when 
they have searched for a service).  Here’s an example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-06-02/service-details.png&quot; alt=&quot;Service Details&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A service consumer can see that there is a service definition they can click on, which
will give them a ton of information about how to use the service.  In the future, we
plan to allow consumers to do all sorts of interesting things with the Swagger spec.
For example, we can help consumers generate a client SDK in a variety of languages.
We can also allow them to simulate API calls right from the apiman UI - so they can
see what to expect.  But for right now, we simply show live documentation about the
service as described by the Swagger spec definition:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-06-02/service-definition.png&quot; alt=&quot;Service Definition&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As always, thanks for making it to the end of my ramblings!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Jun 2015 05:04:45 -0400</pubDate>
        <link>http://apiman.io/blog/api-manager/swagger/service/ui/2015/06/02/swagger.html</link>
        <guid isPermaLink="true">http://apiman.io/blog/api-manager/swagger/service/ui/2015/06/02/swagger.html</guid>
        
        
        <category>api-manager</category>
        
        <category>swagger</category>
        
        <category>service</category>
        
        <category>ui</category>
        
      </item>
    
      <item>
        <title>The JBoss apiman API Manager REST services API</title>
        <description>&lt;p&gt;In this, the third article in our series on apiman, JBoss’ new open source API Management framework, we’ll examine apiman’s API Manager REST services API. apiman’s Management UI utilizes this API in the implementation for all of its user-visible features, and you can also use the same API to automate tasks with apiman.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;It’s inevitable that, after you work with a product’s UI for a while that you encounter tasks that are better suited to a scripting or batch interface. For example, if you have to perform a similar task for a large of related data items, the time that it can require to perform these tasks through an interactive UI can be prohibitive. Also, it’s easy for repetitive tasks to become error prone as you can lose focus, even if you are working in a well designed and easy to use interface such as apiman.&lt;/p&gt;

&lt;p&gt;One solution to this problem is to augment the UI with a command line or scripting interface. This can lead to a whole separate set of issues if the new interface is built on a different set of underlying routines than the UI. A better approach to allow access to the same routines in which the UI is constructed. This approach removes any duplication, and also enables you to replicate manual UI based tasks with automated or scripted tools.&lt;/p&gt;

&lt;p&gt;JBoss apiman follows this second approach with its REST interface.  All the services provided by apiman in its Management UI are directly supported in the API Manager REST services API. You can also directly access these same services through the REST API.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Like a lot of things with JBoss open source software, installing the REST API is easy. In fact, if you have apiman installed, then you already have the REST API installed. (You can’t get much easier than that!)&lt;/p&gt;

&lt;p&gt;We covered installing apiman in the first article in this series (see: http://java.dzone.com/articles/impatient-new-users), so we won’t repeat that information here. A minimal set of install instructions are always available on the apiman site (http://www.apiman.io/latest/). The current set of instructions as of this writing are:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir ~/apiman-1.1.2.Final  
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/apiman-1.1.2.Final  
wget http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip  
wget http://downloads.jboss.org/overlord/apiman/1.1.2.Final/apiman-distro-wildfly8-1.1.2.Final-overlay.zip  
unzip wildfly-8.2.0.Final.zip  
unzip -o apiman-distro-wildfly8-1.1.2.Final-overlay.zip -d wildfly-8.2.0.Final  
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;wildfly-8.2.0.Final  
./bin/standalone.sh -c standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that our apiman server is up and running, we can start to access the API Manager REST services API. However, before we start placing calls to services through the REST API, let’s take a look at how the API is organized.&lt;/p&gt;

&lt;h2 id=&quot;the-organization-of-the-api&quot;&gt;The Organization of the API&lt;/h2&gt;

&lt;p&gt;The documentation for the apiman REST API is available (for free, of course), here: http://www.apiman.io/latest/api-manager-restdocs.html&lt;/p&gt;

&lt;p&gt;The services and their endpoints represented in the API are divided into these groups:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;actions - The actions endpoint (http://localhost:8080/apiman/actions/) enables you to execute actions for apiman entities (such as plans, services, applications, etc.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;system/status - The system/status endpoint (http://localhost:8080/apiman/system/status) enables you to query the current state of the apiman system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;currentuser - The currentuser endpoint (http://localhost:8080/apiman/currentuser/info) enables you to obtain or update information about the current user. This information is related to the user’s applications, services, organizations, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gateways - The gateways endpoint (http://localhost:8080/apiman/gateways/) enables you to obtain information about an API Gateway, and to delete or create new gateways.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;organizations - The organizations endpoint (http://localhost:8080/apiman/organizations/) enables you to obtain information about existing organizations and to create new organizations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;permissions - The permissions endpoint (http://localhost:8080/apiman/permissions/) enables you to obtain information about user’s permissions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;plugins - The plugins endpoint (http://localhost:8080/apiman/plugins/) enables you to obtain information about installed plugins, and to install new plugins.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;policyDefs - The policyDefs endpoint (http://localhost:8080/apiman/policyDefs/) enables you to obtain information about existing policy definitions, and to define new policy definitions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;roles - The roles endpoint (http://localhost:8080/apiman/roles/) enables you to obtain information about existing roles, update roles, and delete roles.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;search - The search endpoint (http://localhost:8080/apiman/search/) enables you to search for applications, organizations, or services.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;users - The users endpoint (http://localhost:8080/apiman/users/) enables you to search for information about users, including their applications and services.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Within each group, GET operations are defined to return information, and GET and POST operations are defined to make changes to apiman elements. Data passed to and returned from services through the API is in the form of JSON along with a return code.&lt;/p&gt;

&lt;h2 id=&quot;accessing-services-in-the-api-manager-rest-services-api&quot;&gt;Accessing Services in the API Manager REST services API&lt;/h2&gt;

&lt;p&gt;The best way to learn about the API Manager REST services API is to see it in action. Since these are REST services, it’s easy to access them. For example, we should be able to access the system status service with a simple GET operation at this endpoint:&lt;/p&gt;

&lt;p&gt;http://localhost:8080/apiman/system/status&lt;/p&gt;

&lt;p&gt;Let’s try this with curl. If we execute the following command, we should see the current system status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET http://localhost:8080/apiman/system/status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, that error is not exactly what we expected. There was no output.&lt;/p&gt;

&lt;p&gt;What went wrong? What’s missing? The answer is that our call to the service was missing authorization. In the same way that a user must login and be authorized to use the apiman Management UI, calls to the REST API must be authorized.&lt;/p&gt;

&lt;p&gt;For our example, we’ll keep things simple and stick to using basic authorization. (We’ll take a more extensive look at apiman and security in a later article in this series.)&lt;/p&gt;

&lt;p&gt;In order to resolve this failure, we have to send a properly encoded basic authorization header with every request you make. In Java8, we can generate a key by base64 encoding this string for the OOTB admin username and password: admin:admin123! with this statememt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;base64encode(concat(&#39;admin&#39;, &#39;:&#39;, &#39;admin123!&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This yields a key with a value of: YWRtaW46YWRtaW4xMjMh&lt;/p&gt;

&lt;p&gt;Now, let’s try that curl command again, but this time, we’ll include the key in the authorization header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -H &quot;Authorization: Basic YWRtaW46YWRtaW4xMjMh&quot;
http://localhost:8080/apiman/system/status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the result is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&quot;up&quot;:true,&quot;version&quot;:&quot;1.1.2-SNAPSHOT&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we mentioned earlier in this article, the responses returned by calls to the REST API are in in the form of JSON. In the case of our call to the http://localhost:8080/apiman/system/status endpoint, the expected format of the response is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;boolean&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s carry on by looking at a more extensive example, where we use the REST API to automate a task that would be tedious if performed in the apiman Management UI.&lt;/p&gt;

&lt;h2 id=&quot;a-larger-example&quot;&gt;A Larger Example&lt;/h2&gt;

&lt;p&gt;Let’s say that you want to create multiple new organizations. You could of course manually enter these into the apiman Management UI. But, if you have a large number of organizations, for example, one for each of the countries in the EU, or each of the states in the USA, this would be a tedious and error prone task. This is an ideal candidate task for automation with the REST API.&lt;/p&gt;

&lt;p&gt;The coding for this example is simple. All you have to do is account for the encoding of the authorization to access the API Manager REST services API, and pass the information related to each organization that you create to this endpoint: http://localhost:8080/apiman/organizations&lt;/p&gt;

&lt;p&gt;Here’s an example program with an ice hockey flavor - the highlights are noted below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apimanExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.OutputStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.nio.charset.StandardCharsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimplePutOrg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Boston&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Chicago&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Detroit&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Montreal&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Toronto&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bruins&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;BlackHawks&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Red Wings&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Canadiens&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Rangers&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Maple Leafs&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Creating new apiman org for: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Return code = &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createNewOrg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]));&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;    
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createNewOrg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://localhost:8080/apiman/organizations&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Encoder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;admin:admin123!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encodeToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StandardCharsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UTF_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Basic &amp;quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDoOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;34&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;35&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Accept&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;36&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;37&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;OutputStreamWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OutputStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;38&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{\&amp;quot;name\&amp;quot;:\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; a new org\&amp;quot;,\&amp;quot;description\&amp;quot;:\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgDescription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;39&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;40&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;41&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;42&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponseCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;43&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Code highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lines 13-16: Here’s where we define the test data. For this example, we’ll use the National Hockey League’s “original 6” teams.&lt;/li&gt;
  &lt;li&gt;Line 24: Here’s the URL for the service to which we’ll connect to create the new organizations.&lt;/li&gt;
  &lt;li&gt;Lines 27-29 - Here’s where we set up the encoding for the BASIC authorization.&lt;/li&gt;
  &lt;li&gt;Lines 31-35 - And here’s where we create the HttpURLConnection that we will use to connect to the service.&lt;/li&gt;
  &lt;li&gt;Line 32: Note that we will be performing a POST operation.&lt;/li&gt;
  &lt;li&gt;Lines 37-40 - And finally, here’s where we connect to the service and send our POST requests to create the new organizations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we run this example, the following output indicates that the calls to the service through the REST API were successful, based on the return code of 200:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Creating new apiman org for: Boston:Bruins  
Return code = 200  
Creating new apiman org for: Chicago:BlackHawks  
Return code = 200  
Creating new apiman org for: Detroit:Red Wings  
Return code = 200  
Creating new apiman org for: Montreal:Canadiens  
Return code = 200  
Creating new apiman org for: New York:Rangers  
Return code = 200  
Creating new apiman org for: Toronto:Maple Leafs  
Return code = 200  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And - here’s the server output that tracks the creation of the new organizations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;21:17:53,205 INFO [stdout] (default task-19) Created organization Boston a new org: OrganizationBean [id=Bostonaneworg, name=Boston a new org, description=Bruins, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,233 INFO [stdout] (default task-21) Created organization Chicago a new org: OrganizationBean [id=Chicagoaneworg, name=Chicago a new org, description=BlackHawks, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,253 INFO [stdout] (default task-23) Created organization Detroit a new org: OrganizationBean [id=Detroitaneworg, name=Detroit a new org, description=Red Wings, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,275 INFO [stdout] (default task-25) Created organization Montreal a new org: OrganizationBean [id=Montrealaneworg, name=Montreal a new org, description=Canadiens, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,295 INFO [stdout] (default task-27) Created organization New York a new org: OrganizationBean [id=NewYorkaneworg, name=New York a new org, description=Rangers, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,316 INFO [stdout] (default task-29) Created organization Toronto a new org: OrganizationBean [id=Torontoaneworg, name=Toronto a new org, description=Maple Leafs, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, here are the organizations as displayed in the apiman Management UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-05-19/new-organizations.png&quot; alt=&quot;new organizations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(It’s been a tough year for Boston Bruins’ fans. It’s nice to see the team listed first, even if it’s just an alphabetic list.  ;-)&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;The architecture of the apiman Management UI is that the UI is built on top of a REST API. This architecture makes it possible for you to directly access the services exposed by the API, and enables you to automate the tasks that you perform in the UI.&lt;/p&gt;

</description>
        <pubDate>Tue, 19 May 2015 07:00:00 -0400</pubDate>
        <link>http://apiman.io/blog/rest/api/automation/2015/05/19/rest-api.html</link>
        <guid isPermaLink="true">http://apiman.io/blog/rest/api/automation/2015/05/19/rest-api.html</guid>
        
        
        <category>rest</category>
        
        <category>api</category>
        
        <category>automation</category>
        
      </item>
    
      <item>
        <title>A great way to test your custom apiman policy!</title>
        <description>&lt;p&gt;If you have tried creating your own custom apiman policy, you may have had a little bit of 
difficulty creating useful junit tests for it.  Many policies require various apiman
runtime components to be available.  It can be super annoying trying to use something like
mockito to create mock versions of everything your policy needs.  Even for simple policies 
you really just want a quick and effective way to test the implementation within a 
reasonably “real world” harness.&lt;/p&gt;

&lt;p&gt;Well you’ve probably guessed by now that I’m about to show you how it’s done!  (OK fine,
how it &lt;em&gt;will&lt;/em&gt; be done in the next release of apiman - 1.1.3.Final)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this post I’ll explain (and show!) you how to write a unit test for your apiman
policy, using the new Policy Tester junit framework we’ve created.&lt;/p&gt;

&lt;h2 id=&quot;first-you-need-a-custom-policy&quot;&gt;First you need a custom policy!&lt;/h2&gt;

&lt;p&gt;If you haven’t created a custom apiman policy yet, have a look at the 
&lt;a href=&quot;http://www.apiman.io/latest/developer-guide.html#_plugins&quot;&gt;Developer Guide&lt;/a&gt; to
learn how.&lt;/p&gt;

&lt;p&gt;So for example, let’s say you’ve created your own simple custom policy class and it
looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MySimplePolicy&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigurationParseException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicyContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IPolicyChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-MTP-Header&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Fail-Test&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IPolicyFailureFactoryComponent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failureFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPolicyFailureFactoryComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failureFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyFailureType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Failure&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doApply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicyContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IPolicyChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-MTP-Response-Header&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Goodbye World&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doApply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;ok-ive-got-a-policy-how-do-i-test-it&quot;&gt;OK I’ve got a policy, how do I test it?&lt;/h2&gt;

&lt;p&gt;Now that you’ve got your policy, you need a quick and effective way to test it.  I also
think it’s important for your test to run quickly and for you to be able to easily set
breakpoints to debug the code.  We explored using &lt;a href=&quot;http://arquillian.org/&quot;&gt;Arquillian&lt;/a&gt; 
to configure and publish a service with the custom policy to a running WildFly server.
It actually works remarkably well, but the overhead of firing up a WildFly server just
to test a single policy seemed excessive.  That work will likely lead into a separate
testing effort focused on testing larger integration scenarios.&lt;/p&gt;

&lt;p&gt;OK enough - let’s get to the test!  The first thing you need is to pull the Policy
Tester dependency into your project’s pom.xml:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.apiman&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;apiman-test-policies&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.2-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great - now just create a new junit test and make sure it extends the &lt;code&gt;ApimanPolicyTest&lt;/code&gt;
base test class.  In that junit test you’ll need to sprinkle in a few annotations
provided by the apiman Policy Testing framework.  At a minimum you will need to
include the &lt;code&gt;@TestingPolicy&lt;/code&gt; and &lt;code&gt;@Configuration&lt;/code&gt; annotations.  Both of these annotations
can be specified at either the &lt;em&gt;Class&lt;/em&gt; or &lt;em&gt;Method&lt;/em&gt; level. The former tells the testing
framework which policy is being tested.  The latter describes the policy configuration
that should be used for the test.&lt;/p&gt;

&lt;p&gt;Just look at the example, already:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@TestingPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySimplePolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTestPolicyTest1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApimanPolicyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Send a test HTTP request to the service (resulting in executing the policy).&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PolicyTestResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequestType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/some/resource&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Test-Name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;testGet&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                
        &lt;span class=&quot;c1&quot;&gt;// Now do some assertions on the result!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EchoResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EchoResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/some/resource&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;testGet&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Test-Name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Assert the request header that was added by the policy&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-MTP-Header&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Assert the response header was added by the policy&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Goodbye World&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-MTP-Response-Header&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;so-whats-going-on-here&quot;&gt;So what’s going on here?&lt;/h2&gt;

&lt;p&gt;Let me tell you!  For each test method in your junit test, we’ll actually spin up a fully
functional apiman API Gateway.  We’ll also publish a test service that’s configured with
your custom policy (and using the policy configuration you specified in the &lt;code&gt;@Configuration&lt;/code&gt;
annotation).  After that, it’s a simple matter of sending one or more simulated HTTP 
requests to the gateway.  You do that by sending a &lt;code&gt;PolicyTestRequest&lt;/code&gt; to the &lt;code&gt;send&lt;/code&gt; method.
Easy peasy!&lt;/p&gt;

&lt;p&gt;Note that it’s pretty easy to create a &lt;code&gt;PolicyTestRequest&lt;/code&gt; - there’s a nice little fluent
builder you can use to create it.  The builder allows you to set the HTTP verb, the resource
path, and any HTTP headers.&lt;/p&gt;

&lt;h2 id=&quot;what-about-the-back-end-apiservice&quot;&gt;What about the back-end API/service?&lt;/h2&gt;

&lt;p&gt;Yeah that’s a good point.  Assuming your policy doesn’t produce a failure, the API Gateway
we’re using for the test needs to “invoke” a back-end service and return the result.  We
simulate this rather than actually going out and making a REST request.  By default, we
create a simple Echo back-end service which bundles up all the information in the REST
request (including anything your policy may have added to the request) and builds a JSON
response that includes all that information.  This is handy because it allows you to 
verify that, for example, any HTTP headers your policy added to the request actually 
made it through to the back-end service.&lt;/p&gt;

&lt;p&gt;Now are you ready for an advanced topic?  If not I understand, you can just hit the Back
button on your browser!&lt;/p&gt;

&lt;p&gt;Still here?  Great!  Another thing you can do is actually provide your own simulated
back-end service.  This is necessary sometimes when your policy does something 
specific with, for example, the service response payload.  You may actually need your
test to respond in a certain way.  To accomplish this all you need to do is use the
&lt;code&gt;@BackEndService&lt;/code&gt; annotation, providing a &lt;em&gt;Class&lt;/em&gt; that implements the
&lt;code&gt;IPolicyTestBackEndService&lt;/code&gt; interface.  You do that, and we’ll use your simulated
back end service for the test instead of the echo service!  :)&lt;/p&gt;

&lt;p&gt;What would that look like?  Something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@TestingPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySimplePolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTestPolicyTest1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApimanPolicyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@BackEndService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCustomBackEndServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Send a test HTTP request to the service (resulting in executing the policy).&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PolicyTestResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequestType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/some/resource&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Test-Name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;testGet&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Now do some assertions on the result!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MyCustomBackEndServiceResponseBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCustomBackEndServiceResponseBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Do some more assertions here using the entity from above!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alright - if you made it this far thanks for reading!!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
        <pubDate>Sat, 09 May 2015 05:07:45 -0400</pubDate>
        <link>http://apiman.io/blog/policy/junit/testing/2015/05/09/policy-testing.html</link>
        <guid isPermaLink="true">http://apiman.io/blog/policy/junit/testing/2015/05/09/policy-testing.html</guid>
        
        
        <category>policy</category>
        
        <category>junit</category>
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Authorization: good god, what is it good for?</title>
        <description>&lt;p&gt;Quite a bit, actually.  :)&lt;/p&gt;

&lt;p&gt;I want to talk about how Authorization currently works in apiman, because it’s
a little bit more loosely coupled than you might expect.  Note that at some 
point in the future we’re going to be renovating how policies are defined and
configured in the API Manager UI.  But until then, you can refer to this blog
post for an overview of how to configure Authorization!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I won’t bury the lead - the key to getting Authorization to work is understanding
that it &lt;em&gt;only&lt;/em&gt; works together with Authentication.  First you must add and 
configure a compatible &lt;em&gt;Authentication&lt;/em&gt; policy, which will be responsible for 
extracting the user’s roles and passing them along to the Authorization policy.&lt;/p&gt;

&lt;h2 id=&quot;define-your-terms-sir&quot;&gt;Define your terms, sir!&lt;/h2&gt;
&lt;p&gt;Let’s make sure we’re on the same page with respect to terminology, shall we?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;: the act of validating that a user is who she claims to be, by checking provided credentials against some source of identity.  Examples include BASIC Authentication and OAuth2.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Authorization&lt;/strong&gt;: the act of ensuring that the authenticated user has &lt;em&gt;permission&lt;/em&gt; to perform the requested action or view the requested data.  Typically involves checking that the user possesses one or more required roles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-does-this-work-in-apiman&quot;&gt;How does this work in apiman?&lt;/h2&gt;

&lt;p&gt;I’m glad you asked.  In apiman we have split these two functions out into separate policies.  This allows us to use the same Authorization policy regardless of what type of Authentication is being used.&lt;/p&gt;

&lt;p&gt;Basically you need to do the following two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add and configure an Authentication policy such as the BASIC Authentication Policy or the Keycloak OAuth2 Authentication Policy&lt;/li&gt;
  &lt;li&gt;Add and configure an Authorization Policy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it in a nutshell!&lt;/p&gt;

&lt;h2 id=&quot;give-me-more-details&quot;&gt;Give me more details!&lt;/h2&gt;

&lt;p&gt;OK, OK.  If you’re reading this you probably know the apiman basics - how to create Organizations and Services and whatnot.  If not, I would recommend you check out the &lt;a href=&quot;http://www.apiman.io/latest/user-guide.html&quot;&gt;User Guide&lt;/a&gt; or the &lt;a href=&quot;http://www.apiman.io/latest/tutorials.html&quot;&gt;Tutorials&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have a service that you want to configure, go ahead and add a new policy.  Choose, for example, the &lt;em&gt;BASIC Authentication Policy&lt;/em&gt; and configure it as seen in the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-05-08/basic-auth-config.png&quot; alt=&quot;Example BASIC Authentication configuration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve added that policy, you can add the Authorization Policy - make sure they are in the proper order, since the Authentication policy must execute first.  Configure the Authorization Policy however you like, using roles appropriate for your users.  For example, it might look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-05-08/authorization-config.png&quot; alt=&quot;Example Authorization configuration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once all is said and done, you should have two (at least) policies configured for your service.  It might look something like this in the UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-05-08/auth-policies.png&quot; alt=&quot;Example policy list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you follow those steps, everything should work out alright for you!  The Authorization Policy is capable of being quite fine-grained.  You can configure role based access via custom resource location regular expressions and HTTP verb(s).  If all you want is a global required role to access your API, that’s easy too:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Resource Path&lt;/strong&gt;: /.*&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Verb/action&lt;/strong&gt;: *&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Required Role&lt;/strong&gt;: &lt;your-role&gt;&lt;/your-role&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good luck and come find us on the mailing list or IRC if you have any trouble!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
        <pubDate>Fri, 08 May 2015 09:15:15 -0400</pubDate>
        <link>http://apiman.io/blog/authorization/authentication/policy/2015/05/08/authorization.html</link>
        <guid isPermaLink="true">http://apiman.io/blog/authorization/authentication/policy/2015/05/08/authorization.html</guid>
        
        
        <category>authorization</category>
        
        <category>authentication</category>
        
        <category>policy</category>
        
      </item>
    
      <item>
        <title>Customizing JBoss apiman Through Policy Plugins</title>
        <description>&lt;p&gt;This is the second in a series of articles exploring API management with JBoss apiman. The first article
was a general introduction to apiman for impatient users where in only 10 minutes we installed apiman, 
created users and organizations, and services, policies, contracts, and applications. In this article, 
we’ll take the first step toward customizing apiman by creating new plugins to implement service policies.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The major new feature added to release 1.0.2 of apiman &lt;a href=&quot;http://www.apiman.io/&quot;&gt;http://www.apiman.io/&lt;/a&gt; is the ability to extend its features through a custom plugin framework. Since policies perform the most important apiman runtime operations, plugins that enable you to create new policies are the first type of plugins to be supported.&lt;/p&gt;

&lt;p&gt;In this article, we’ll examine all the steps that you must perform to create a new policy plugin, and then import it into apiman and configure a service to put it into use.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;For this article, we’ll assume that you have completed all the steps in the first article in this series. The first article guides even the most impatient user through installing and using apiman.&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-example-plugins&quot;&gt;Accessing the Example Plugins&lt;/h2&gt;

&lt;p&gt;Like all JBoss software, apiman provides functioning example code that you can use as a starting point for your own plugins. The easiest way to create and package an apiman is as a standard maven project packaged as a .war file.&lt;/p&gt;

&lt;p&gt;To download a copy of the example plugins, execute this git command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/apiman/apiman-plugins
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the git clone operation completes, you’ll have the source code for multiple example plugins. The exact set of plugins that you have downloaded may change, depending on when you download them, as more examples are always being added. For the purposes of this article, we’ll focus on the “config-policy” example plugin. This plugin demonstrates how a plugin can be used to set the value of properties in a message being processed by a service. Specifically, this plugin defines properties in the request and response headers and enables you to set their values to “true.”&lt;/p&gt;

&lt;h2 id=&quot;requirements-for-a-plugin-implementation&quot;&gt;Requirements for a Plugin Implementation&lt;/h2&gt;

&lt;p&gt;The easiest way that an apiman policy plugin can be build and packaged is as a standard maven project packaged as a .war file. There are just a few modifications that are required to convert a .war into a plugin.&lt;/p&gt;

&lt;p&gt;Let’s take a closer look at the files and directories that comprise the apiman config-policy plugin, and the changes that are needed to implement a plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├---pom.xml
└---src
└---main
├---apiman
│  ├---plugin.json
│  └---policyDefs
│    ├---config-policyDef.json
│    └---schemas
│  └---config-policyDef.schema
└---java
└---io
└---apiman
└---plugins
└---config_policy
├---ConfigBean.java
└---ConfigPolicy.java
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most obvious difference is the addition of the “apiman” directory. This directory is used to contain the configuration files for the plugin. (In other words, the files that make the project a plugin.) The only project-wide configuration change that you have to make is to modify the plugin’s maven pom.xml file to include the apiman directory when the project is built. The following lines are added to the plugin’s pom.xml file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;resource&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;src/main/apiman&lt;span class=&quot;nt&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;targetPath&amp;gt;&lt;/span&gt;META-INF/apiman&lt;span class=&quot;nt&quot;&gt;&amp;lt;/targetPath&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;filtering&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filtering&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result of these statements in the pom.xml file is that the contents of the apiman directory are included in the project build’s META-INF directory. (We’ll take a look at this later when we build the plugin project.) Setting filtering to true enables maven property expansion during the creation of the plugin war file.
Configuration files for the plugin are contained in the apiman directory. The primary configuration file is the “plugin.json” file. This file is required for all apiman plugins, regardless of the plugin type. The meta-data contained in this file describes the plugin and is displayed in the API Manager UI.&lt;/p&gt;

&lt;p&gt;Since our example is contributing a policy, it must contain a JSON file that defines the policy. This JSON file is contained in the apiman/policyDefs directory and is named “config-policyDef.json.” This file defines the following fields for the policy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;id&lt;/em&gt; - A unique identifier for the policy&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;name&lt;/em&gt; - A user friendly (in other words, a human readable) name for the policy. This policy name is displayed in the API Manager UI&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;description&lt;/em&gt; - A description of the policy&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;policyImpl&lt;/em&gt; - This is the fully qualified classname name of the Java class that actually implements the policy. This value must be properly formatted to include information about the plugin, including placeholders for maven properties, for example, project version.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;icon&lt;/em&gt; - This is the name of a Font Awesome icon &lt;a href=&quot;http://fontawesome.github.io/Font-Awesome/&quot;&gt;http://fortawesome.github.io/Font-Awesome/&lt;/a&gt; that is displayed for the Policy in the API Manager UI.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;formType&lt;/em&gt; - The type of policy configuration UI form. Our example uses JsonSchema.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;form&lt;/em&gt; - This is a relative path to the policy configuration UI form contained in the plugin. Our examples uses the JSON Schema that defines the configuration data format. (More on this file in a minute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our example, the config-policyDef.json looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;config-policy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Config Policy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A policy used to showcase policy configuration.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;policyImpl&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;plugin:${project.groupId}:${project.artifactId}:${project.version}:${project.packaging}/io.apiman.plugins.config_policy.ConfigPolicy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;icon&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sliders&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;formType&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;JsonSchema&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;form&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;schemas/config-policyDef.schema&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We mentioned that since our example uses the JSON schema &lt;a href=&quot;http://json-schema.org/documentation.html&quot;&gt;http://json-schema.org/documentation.html&lt;/a&gt;, we have to also define the configuration data format. This is done in the policyDefs/schemas/config-policyDef.schema file. This file defines the format used in the policy configuration file data and is used by the API Manager UI to generate a form that is used to fill in the values to be used to configure the policy. In our example, the policy’s JSON schema defines two properties: requestHeader and responseHeader.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Configure HTTP Headers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Set the HTTP request header to populate with the value &amp;#39;true&amp;#39; when the request is made. Also set the HTTP response header to populate with the value &amp;#39;true&amp;#39; after the response is received from the back-end service.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;quot;requestHeader&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Request Header&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;minLength&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;maxLength&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Response Header&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;minLength&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;maxLength&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That finishes the description of the policy’s configuration files. To complete the policy plugin, the example also requires the Java implementation for the policy itself. The policy implementation is contained in the src/main/java/io/apiman/plugins/config_policy/ConfigPolicy.java file. The policy is very simple as it merely appends a header to the http request and response.&lt;/p&gt;

&lt;p&gt;Java policy classes must implement the apiman IPolicy interface. This example takes that a step further by actually extending the io.apiman.gateway.engine.policies.AbstractMappedPolicy class. By doing so, the policy Java code can take advantage of the AbstractMappedPolicy’s class use of the Jackson (https://github.com/FasterXML/jackson) JSON parser to parse the policy configuration data into a Java bean. (In this example, the bean is implemented in  src/main/java/io/apiman/plugins/config_policy/ConfigBean.java.) If the policy implemented the IPolicy interface, instead of extending AbstractMappedPolicy, then the policy Java class would have to implement its own parser.&lt;/p&gt;

&lt;h2 id=&quot;building-the-plugin-and-installing-it-into-the-maven-repo&quot;&gt;Building the Plugin and Installing it into the Maven Repo&lt;/h2&gt;

&lt;p&gt;Building the plugin with maven is easy. Just execute this command from the directory that contains the plugin’s pom.xml file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case you’re wondering why, we’re installing the plugin into the maven repo. The answer is simply that in the current release of apiman, the only supported install path is from the maven repo. Future releases of apiman will likely support additional installation paths.&lt;/p&gt;

&lt;h2 id=&quot;installing-a-plugin-into-apiman&quot;&gt;Installing a Plugin into apiman&lt;/h2&gt;

&lt;p&gt;In apiman, a policy plugin, once installed, is available on a system-wide basis. Accordingly, plugins can only be installed by an admin user. After you login as admin, you’ll see this in the admin UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-03-06/apiman-1.png&quot; alt=&quot;System Administration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After selecting “Manage Plugins,” you’ll see a screen that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-03-06/apiman-2.png&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, if you then select “Add Plugin,” you’ll see this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-03-06/apiman-3.png&quot; alt=&quot;Add Plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The GroupId, ArtifactId, and Version information is all available in the example plugin’s pom.xml file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;GroupId&lt;/em&gt;: io.apiman.plugins&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;ArtifactId&lt;/em&gt;: apiman-plugins-config-policy&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Version&lt;/em&gt;: 1.0.3-SNAPSHOT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you enter this information for the plugin and click on “Add Plugin,” you’ll see this displayed in the UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-03-06/apiman-4.png&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! The plugin is installed and is ready to be used! Let’s add it to a service and see it in action.&lt;/p&gt;

&lt;h2 id=&quot;using-the-installed-plugin&quot;&gt;Using the Installed Plugin&lt;/h2&gt;

&lt;p&gt;First, we have to log out of the admin account in the Admin UI and then log back in as the “serprov” service provider. Then, select our “echo” service, and create a new version of the service, based on the original version of the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-03-06/apiman-6.png&quot; alt=&quot;New Service Version&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, when you add a new policy to the service, you’ll see the example config service that we just installed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-03-06/apiman-5.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you select the Config Policy, you’ll be presented with a dialog where you can specify the values for the two properties defined in the policy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-03-06/apiman-7.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s fill in some easy to remember values:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-03-06/apiman-8.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After adding the policy, you’ll see it displayed in the policies defined for the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-03-06/apiman-9.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then publish the service. In order to consume the service, login to the API Manager UI as the application developer “appdev”, and create a new application that uses the new service. (We covered the creation of new applications in detail in the first article in this series)&lt;/p&gt;

&lt;p&gt;And when the service is invoked, you’ll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-03-06/apiman99.png&quot; alt=&quot;REST Client&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-03-06/apiman100.png&quot; alt=&quot;REST Client&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;OK, let’s recap. apiman is a rapidly growing and developing project. Each new release brings new features. In release 1.0.2, it became possible for users to contribute custom policies into their apiman installation through the API Manager UI.&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Mar 2015 05:22:00 -0500</pubDate>
        <link>http://apiman.io/blog/plugins/policies/maven/2015/03/06/custom-policies.html</link>
        <guid isPermaLink="true">http://apiman.io/blog/plugins/policies/maven/2015/03/06/custom-policies.html</guid>
        
        
        <category>plugins</category>
        
        <category>policies</category>
        
        <category>maven</category>
        
      </item>
    
      <item>
        <title>An Impatient New User&#39;s Introduction to API Management with JBoss apiman 1.0</title>
        <description>&lt;p&gt;Software application development models are evolutionary things. New technologies are always being created 
and require new approaches. It’s frequently the case today, that a service oriented architecture (SOA) model 
is used and that the end product is a software service that can be used by applications. The explosion in 
growth of mobile devices has only accelerated this trend. Every new mobile phone sold is another platform 
onto which applications are deployed. These applications are often built from services provided from multiple 
sources. The applications often consume these services through their APIs.&lt;/p&gt;

&lt;p&gt;OK, that’s all interesting, but why does this matter?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here’s why:&lt;/p&gt;

&lt;p&gt;If you are providing a service, you’d probably like to receive payment when it’s used by an application. For 
example, let’s say that you’ve spent months creating a new service that provides incredibly accurate and 
timely driving directions. You can imagine every mobile phone GPS app making use of your service someday. 
That is, however, assuming that you can find a way to enforce a contract on consumers of the API and provide 
them with a service level agreement (SLA). Also, you have to find a way to actually track consumers’ use of 
the API so that you can actually enforce that SLA. Finally, you have to have the means to update a service 
and publish new versions of services.&lt;/p&gt;

&lt;p&gt;Likewise, if you are consuming a service, for example, if you want to build the killer app that will use that 
cool new mapping service, you have to have the means to find the API, identify the API’s endpoint, and 
register your usage of the API with its provider.&lt;/p&gt;

&lt;p&gt;The approach that is followed to fulfill both service providers’ and consumers’ needs is…API Management.&lt;/p&gt;

&lt;h2 id=&quot;jboss-apiman-10&quot;&gt;JBoss apiman 1.0&lt;/h2&gt;

&lt;p&gt;apiman is JBoss’ open source API Management system. apiman fulfills service API providers’ and consumers’ 
needs by implementing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;API Manager&lt;/em&gt; - The API Manager provides an easy way for API/service providers to use a web UI to define service contracts for their APIs, apply these contracts across multiple APIs, and control role-based user access and API versioning. These contracts can govern access to services and limits on the rate at which consumers can access services. The same UI enables API consumers to easily locate and access APIs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;API Gateway&lt;/em&gt; - The gateway applies the service contract policies of API Management by enforcing at runtime the rules defined in the contracts and tracking the service API consumers’ use of the APIs for every request made to the services. The way that the API Gateway works is that the consumer of the service accesses the service through a URL that designates the API Gateway as a proxy for the service. If the policies defined to govern access to the service (see a later section in this post for a discussion of apiman polices), the API Gateway then proxies requests to the service’s backend API implementation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way to understand API Management with apiman is to see it in action. In this post, we’ll install 
apiman 1.0, configure an API with contracts through the API Manager, and watch the API Gateway control access
to the API and track its use.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;We don’t need very much to run apiman out of the box. Before we install apiman, you’ll have to have Java (version 1.7 or newer) installed on your system. You’ll also need to git and maven installed to be able to build the example service that we’ll use.&lt;/p&gt;

&lt;p&gt;A note on software versions: In this post we’ll use the latest available version of apiman as of December 2014. As if this writing, version 1.0 of apiman was just released (December 2014). Depending on the versions of software that you use, some screen displays may look a bit different.&lt;/p&gt;

&lt;h2 id=&quot;getting-apiman&quot;&gt;Getting apiman&lt;/h2&gt;

&lt;p&gt;Like all JBoss software, installation of apiman is simple. First, you will need an application server on which to install and run apiman. We’ll use the open source JBoss WildFly server release 8.2 &lt;a href=&quot;http://www.wildfly.org/&quot;&gt;http://www.wildfly.org/&lt;/a&gt;.  To make things easier, apiman includes a pointer to JBoss WildFly on its download page here: &lt;a href=&quot;http://www.apiman.io/latest/download.html&quot;&gt;http://www.apiman.io/latest/download.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To install WildFly, simply download &lt;a href=&quot;http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&quot;&gt;http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&lt;/a&gt; and unzip the file into the directory in which you want to run the sever.&lt;/p&gt;

&lt;p&gt;Then, download the apiman 1.0 WildFly overlay zip file inside the directory that was created when you un-zipped the WildFly download. The apiman 1.0 WildFly overlay zip file is available here: &lt;a href=&quot;http://downloads.jboss.org/overlord/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&quot;&gt;http://downloads.jboss.org/overlord/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The commands that you will execute will look something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir apiman
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;apiman
unzip wildfly-8.2.0.Final.zip
unzip -o apiman-distro-wildfly8-1.0.0.Final-overlay.zip -d wildfly-8.2.0.Final&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, to start the server, execute these commands:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;wildfly-8.2.0.Final
./bin/standalone.sh -c standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The server will write logging messages to the screen. When you see some messages that look like this, you’ll know that the server is up and running with apiman installed:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;13:57:03,229 INFO  [org.jboss.as.server] (ServerService Thread Pool -- 29) JBAS018559: Deployed &amp;quot;apiman-ds.xml&amp;quot; (runtime-name : &amp;quot;apiman-ds.xml&amp;quot;)
13:57:03,261 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015961: Http management interface listening on &amp;lt;a href=&amp;quot;http://127.0.0.1:9990/management&amp;quot;&amp;gt;http://127.0.0.1:9990/management&amp;lt;/a&amp;gt;
13:57:03,262 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015951: Admin console listening on &amp;lt;a href=&amp;quot;http://127.0.0.1:9990&amp;quot;&amp;gt;http://127.0.0.1:9990&amp;lt;/a&amp;gt;
13:57:03,262 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015874: WildFly 8.2.0.Final &amp;quot;Tweek&amp;quot; started in 5518ms - Started 754 of 858 services (171 services are lazy, passive or on-demand)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If this were a production server, the first thing that we’d do is to change the OOTB default admin username and/or password. apiman is configured by default to use JBoss KeyCloak &lt;a href=&quot;http://keycloak.jboss.org/&quot;&gt;http://keycloak.jboss.org/&lt;/a&gt; for password security. Also, the default database used by apiman to store contract and service information is the H2 database. For a production server, you’d want to reconfigure this to use a production database. Note: apiman includes DDLs for both MySQL and PostgreSQL.&lt;/p&gt;

&lt;p&gt;For the purposes of our demo, we’ll keep things simple and use the default configuration.&lt;/p&gt;

&lt;p&gt;To access apiman’s API Manager UI, go to: &lt;a href=&quot;http://localhost:8080/apiman-manager&quot;&gt;http://localhost:8080/apiman-manager&lt;/a&gt;, and log in. The admin user account that we’ll use has a username of “admin” and a password of “admin123!”&lt;/p&gt;

&lt;p&gt;You should see a screen that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/apiman_1.png&quot; alt=&quot;Dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before we start using apiman, let’s take a look at how apiman defines how services and the meta data on which they depend are organized.&lt;/p&gt;

&lt;h2 id=&quot;policies-plans-and-organizations&quot;&gt;Policies, Plans, and Organizations&lt;/h2&gt;

&lt;p&gt;apiman uses a hierarchical data model that consists of these elements: Polices, Plans, and Organizations:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/apiman_2.jpg&quot; alt=&quot;Diagram_1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;policies&quot;&gt;Policies&lt;/h2&gt;

&lt;p&gt;Policies are at the lowest level of the data model, and they are the basis on which the higher level elements of the data model are built. A policy defines an action that is performed by the API Gateway at runtime. Everything defined in the API Manager UI is there to enable apiman to apply policies to requests made to services.&lt;/p&gt;

&lt;p&gt;When a request to a service is made, apiman creates a chain of policies to be applied to that request. apiman policy chains define a specific sequence order in which the policies defined in the API Manager UI are applied to service requests.&lt;/p&gt;

&lt;p&gt;The sequence in which incoming service requests have policies applied is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, at the application level. In apiman, an application is contracted to use one or more services.&lt;/li&gt;
  &lt;li&gt;Second, at the plan level. In apiman, policies are organized into groups called plans. (We’ll discuss plans in the next section of this post.)&lt;/li&gt;
  &lt;li&gt;Third, at the individual service level.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What happens is that when a service request is received by the API Gateway at runtime, the policy chain is applied in the order of application, plan, and service. If no failures, such as a rate counter being exceeded, occur, the API Gateway sends the request to the service’s backend API implementation. As we mentioned earlier in this post, the API Gateway acts as a proxy for the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/apiman_3.jpg&quot; alt=&quot;Diagram_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, when the API Gateway receives a response from the service’s backend implementation, the policy chain is applied again, but this time in the reverse order. The service policies are applied first, then the plan policies, and finally the application policies. If no failures occur, then the service response is sent back to the consumer of the service.&lt;/p&gt;

&lt;p&gt;By applying the policy chain twice, both for the originating incoming request and the resulting response, apiman allows policy implementations two opportunities to provide management functionality during the lifecycle. The following diagram illustrates this two-way approach to applying policies:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/apiman_4.jpg&quot; alt=&quot;Diagram_3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;plans&quot;&gt;Plans&lt;/h2&gt;

&lt;p&gt;In apiman, a “plan” is a set policies that together define the level of service that apiman provides for service. Plans enable apiman users to define multiple different levels of service for their APIs, based on policies. It’s common to define different plans for the same service, where the differences depend on configuration options. For example, a group or company may offer both a “gold” and “silver” plan for the same service. The gold plan may be more expensive than the silver plan, but it may offer a higher level of service requests in a given (and configurable) time period.&lt;/p&gt;

&lt;h2 id=&quot;organizations&quot;&gt;Organizations&lt;/h2&gt;

&lt;p&gt;The “organization” is at top level of the apiman data model.&lt;/p&gt;

&lt;p&gt;An organization contains and manages all elements used by a company, university, group inside a company, etc. for API management with apiman. All plans, services, applications, and users for a group are defined in an apiman organization. In this way, an organization acts as a container of other elements. Users must be associated with an organization before they can use apiman to create or consume services. apiman implements role-based access controls for users. The role assigned to a user defines the actions that a user can perform and the elements that a user can manage.&lt;/p&gt;

&lt;p&gt;Before we can define a service, the policies that govern how it is accessed, the users who will be able to access, and the organizations that will create and consume it, we need a service and a client to access that service. Luckily, creating the service and deploying it to our WildFly server, and accessing it through a client are easy.&lt;/p&gt;

&lt;h2 id=&quot;getting-and-building-and-deploying-the-example-service&quot;&gt;Getting and Building and Deploying the Example Service&lt;/h2&gt;

&lt;p&gt;The source code for the example service is contained in a git repo (http://git-scm.com) hosted at github (https://github.com/apiman). To download a copy of the example service, navigate to the directory in which you want to build the service and execute this git command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:apiman/apiman-quickstarts.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the source code is downloading, you’ll see output that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:apiman/apiman-quickstarts.git
Initialized empty Git repository in /tmp/tmp/apiman-quickstarts/.git/
remote: Counting objects: 104, done.
remote: Total 104 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (104/104), 18.16 KiB, done.
Resolving deltas: 100% (40/40), done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, after the download is complete, you’ll see a populated directory tree that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;└── apiman-quickstarts
  ├── echo-service
  │  ├── pom.xml
  │  ├── README.md
  │  └── src
  │    └── main
  │    ├── java
  │    │  └── io
  │    │    └── apiman
  │    │    └── quickstarts
  │    │    └── echo
  │    │    ├── EchoResponse.java
  │    │    └── EchoServlet.java
  │    └── webapp
  │    └── WEB-INF
  │    ├── jboss-web.xml
  │    └── web.xml
  ├── LICENSE
  ├── pom.xml
  ├── README.md
  ├── release.sh
  └── src
   └── main
   └── assembly
   └── dist.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we mentioned earlier in the post, the example service is very simple. The only action that the service performs is to echo back in responses the meta data in the REST (http://en.wikipedia.org/wiki/Representational_state_transfer) requests that it receives.&lt;/p&gt;

&lt;p&gt;Maven is used to build the service. To build the service into a deployable .war file, navigate to the directory into which you downloaded the service example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd apiman-quickstarts/echo-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then execute this maven command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the service is being built into a .war file, you’ll see output that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[INFO] Scanning for projects...
[INFO]
[INFO] Using the builder org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder with a thread count of 1
[INFO]   
[INFO] ------------------------------------------------------------------------
[INFO] Building apiman-quickstarts-echo-service 1.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ apiman-quickstarts-echo-service ---
[INFO] Using &amp;#39;UTF-8&amp;#39; encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /jboss/local/redhat_git/apiman-quickstarts/echo-service/src/main/resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ apiman-quickstarts-echo-service ---
[INFO] Compiling 2 source files to /jboss/local/redhat_git/apiman-quickstarts/echo-service/target/classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ apiman-quickstarts-echo-service ---
[INFO] Using &amp;#39;UTF-8&amp;#39; encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /jboss/local/redhat_git/apiman-quickstarts/echo-service/src/test/resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ apiman-quickstarts-echo-service ---
[INFO] No sources to compile
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ apiman-quickstarts-echo-service ---
[INFO] No tests to run.
[INFO]
[INFO] --- maven-war-plugin:2.2:war (default-war) @ apiman-quickstarts-echo-service ---
[INFO] Packaging webapp
[INFO] Assembling webapp in [/jboss/local/redhat_git/apiman-quickstarts/echo-service/target/apiman-quickstarts-echo-service-1.0.1-SNAPSHOT]
[INFO] Processing war project
[INFO] Copying webapp resources [/jboss/local/redhat_git/apiman-quickstarts/echo-service/src/main/webapp]
[INFO] Webapp assembled in [23 msecs]
[INFO] Building war: /jboss/local/redhat_git/apiman-quickstarts/echo-service/target/apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war
[INFO] WEB-INF/web.xml already added, skipping
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.184 s
[INFO] Finished at: 2014-12-26T16:11:19-05:00
[INFO] Final Memory: 14M/295M
[INFO] ------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you look closely, near the end of the output, you’ll see the location of the .war file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/jboss/local/redhat_git/apiman-quickstarts/echo-service/target/apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To deploy the service, we can copy the .war file to our WildFly server’s “deployments” directory. After you copy the service’s .war file to the deployments directory, you’ll see output like this generated by the WildFly server:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;16:54:44,313 INFO  [org.jboss.as.server.deployment] (MSC service thread 1-7) JBAS015876: Starting deployment of &amp;quot;apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war&amp;quot; (runtime-name: &amp;quot;apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war&amp;quot;)
16:54:44,397 INFO  [org.wildfly.extension.undertow] (MSC service thread 1-16) JBAS017534: Registered web context: /apiman-echo
16:54:44,455 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 1) JBAS018559: Deployed &amp;quot;apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war&amp;quot; (runtime-name : &amp;quot;apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make special note of this line of output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;16:54:44,397 INFO  [org.wildfly.extension.undertow] (MSC service thread 1-16) JBAS017534: Registered web context: /apiman-echo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This output indicates that the URL of the deployed example service is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[a href=&amp;quot;http://localhost:8080/apiman-echo&amp;quot; style=&amp;quot;text-decoration: none;&amp;quot;]http://localhost:8080/apiman-echo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember, however, that this is the URL of the deployed example service if we access it directly. We’ll refer to this as the “unmanaged service” as we are able to connect to the service directly, without going through the API Gateway.  The URL to access the service through the API Gateway (“the managed service”) at runtime will be different.&lt;/p&gt;

&lt;p&gt;Now that our example service is installed, it’s time to install and configure our client to access the server.&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-example-service-through-a-client&quot;&gt;Accessing the Example Service Through a Client&lt;/h2&gt;

&lt;p&gt;There are a lot of options available when it comes to what we can use for a client to access our service. We’ll keep the client simple so that we can keep our focus on apiman and simply install a REST client into the FireFox browser. The REST Client FireFox add-on (http://restclient.net/) is available here: https://addons.mozilla.org/en-US/firefox/addon/restclient/versions/2.0.3&lt;/p&gt;

&lt;p&gt;After you install the client into FireFox, you can access the deployed service using the URL that we just defined. If you execute a GET command, you’ll see output that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-4.png&quot; alt=&quot;Screenshot 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that our example service is built, deployed and running, it’s time to create the organizations for the service provider and the service consumer. The differences between the requirements of the two organizations will be evident in their apiman configuration properties.&lt;/p&gt;

&lt;h2 id=&quot;creating-users-for-the-service-provider-and-consumer&quot;&gt;Creating Users for the Service Provider and Consumer&lt;/h2&gt;

&lt;p&gt;Before we create the organizations, we have to create a user for each organization. We’ll start by creating the service provider user. To do this, logout from the admin account in the API Manager UI. The login dialog will then be displayed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-5.png&quot; alt=&quot;Screenshot 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the “New user” Option and register the service provider user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-6.png&quot; alt=&quot;Screenshot 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, logout and repeat the process to register a new application developer user too:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-7.png&quot; alt=&quot;Screenshot 7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that the new users are registered we can create the organizations.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-service-producer-organization&quot;&gt;Creating the Service Producer Organization&lt;/h2&gt;

&lt;p&gt;To create the service producer organization, log back into the API Manager UI as the servprov user and select “Create a new Organization”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/apiman_2.png&quot; alt=&quot;dash-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select a name and description for the organization, and press “Create Organization”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-15.png&quot; alt=&quot;Screenshot 15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, here’s our organization:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-16.png&quot; alt=&quot;Screenshot 16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that in a production environment, users would request membership in an organization. The approval process for accepting new members into an organization would follow the organization’s workflow, but this would be handled outside of the API Manager. For the purposes of our demonstration, we’ll keep things simple.&lt;/p&gt;

&lt;h2 id=&quot;configuring-the-service-its-policies-and-plans&quot;&gt;Configuring the Service, its Policies, and Plans&lt;/h2&gt;

&lt;p&gt;To configure the service, we’ll first create a plan to contain the policies that we want applied by the API Gateway at runtime when requests to the service are made. To create a new plan, select the “Plans” tab. We’ll create a “gold” plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-17.png&quot; alt=&quot;Screenshot 17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the plan is created, we will add policies to it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-18.png&quot; alt=&quot;Screenshot 18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;apiman provides several OOTB policies. Since we want to be able to demonstrate a policy being applied, we’ll select a Rate Limiting Policy, and set its limit to a very low level. If our service receives more than 10 requests in a day, the policy should block all subsequent requests. So much for a “gold” level of service!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-19.png&quot; alt=&quot;Screenshot 19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After we create the policy and add it to the plan, we have to lock the plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-21.png&quot; alt=&quot;Screenshot 21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, here is the finished, and locked plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-22.png&quot; alt=&quot;Screenshot 22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, additional plans can be defined for the service. We’ll also create a “silver” plan, that will offer a lower level of service (i.e., a request rate limit lower than 10 per day) than the gold plan. Since the process to create this silver plan is identical to that of the gold plan, we’ll skip the screenshots.&lt;/p&gt;

&lt;p&gt;Now that the two plans are complete and locked, it’s time to define the service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-23.png&quot; alt=&quot;Screenshot 23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll give the service an appropriate name, so that providers and consumers alike will be able to run a query in the API Manager to find it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-24.png&quot; alt=&quot;Screenshot 24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the service is defined, we have to define its implementation. In the context of the API Manager, the API Endpoint is the service’s direct URL. Remember that the API Gateway will act as a proxy for the service, so it must know the service’s actual URL. In the case of our example service, the URL is:  &lt;a href=&quot;http://localhost:8080/apiman-echo&quot;&gt;http://localhost:8080/apiman-echo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-25.png&quot; alt=&quot;Screenshot 25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The plans tab shows which plans are available to be applied to the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-26.png&quot; alt=&quot;Screenshot 26&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s make our service more secure by adding an authentication policy that will require users to login before they can access the service. Select the Policies tab, and then define a simple authentication policy. Remember the user name and password that you define here as we’ll need them later on when send requests to the service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-27.png&quot; alt=&quot;Screenshot 27&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the authentication policy is added, we can publish the service to the API Gateway:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-28.png&quot; alt=&quot;Screenshot 28&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, here it is, the published service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-29.png&quot; alt=&quot;Screenshot 29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK, that finishes the definition of the service provider organization and the publication of the service.&lt;/p&gt;

&lt;p&gt;Next, we’ll switch over to the service consumer side and create the service consumer organization and register an application to connect to the managed service through the proxy of the API Gateway.&lt;/p&gt;

&lt;h2 id=&quot;the-service-consumer-organization&quot;&gt;The Service Consumer Organization&lt;/h2&gt;

&lt;p&gt;We’ll repeat the process that we used to create the application development organization. Log in to the API Manager UI as the “appdev” user and create the organization:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-30.png&quot; alt=&quot;Screenshot 30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unlike the process we used when we created the elements used by the service provider, the first step that we’ll take is to create a new application and then search for the service to be used by the application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-31.png&quot; alt=&quot;Screenshot 31&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Searching for the service is easy, as we were careful to set the service name to something memorable:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-32.png&quot; alt=&quot;Screenshot 32&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the service name, and then specify the plan to be used. We’ll splurge and use the gold plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-33.png&quot; alt=&quot;Screenshot 33&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, select “create contract” for the plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-34.png&quot; alt=&quot;Screenshot 34&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, agree to the contract terms (which seem to be written in a strange form of Latin in the apiman 1.0 release):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-35.png&quot; alt=&quot;Screenshot 35&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last step is to register the application with the API Gateway so that the gateway can act as a proxy for the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-36.png&quot; alt=&quot;Screenshot 36&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! All the steps necessary to provide and consume the service are complete!&lt;/p&gt;

&lt;p&gt;There’s just one more step that we have to take in order for clients to be able access the service through the API Gateway.&lt;/p&gt;

&lt;p&gt;Remember the URL that we used to access the unmanaged service directly? Well, forget it. In order to access the managed service through the API Gateway acting as a proxy for other service we have to obtain the managed service’s URL. In the API Manager UI, head on over to the “APIs” tab for the application, click on the the ‘&amp;gt;’ character to the left of the service name. This will expose the API Key and the service’s HTTP endpoint in the API Gateway:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-37.png&quot; alt=&quot;Screenshot 37&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to be able access the service through the API Gateway, we have to provide the API Key with each request. The API Key can be provided either through an HTTP Header (X-API-Key) or a URL query parameter. Luckily, the API Manager UI does the latter for us. Select the icon to the right of the HTTP Endpoint and this dialog is displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-38.png&quot; alt=&quot;Screenshot 38&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copy the URL into the clipboard. We’ll need to enter this into the client in a bit. The combined API Key and HTTP endpoint should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&quot;&gt;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-managed-service-through-the-apiman-api-gateway-watching-the-policies-at-runtime&quot;&gt;Accessing the Managed Service Through the apiman API Gateway, Watching the Policies at Runtime&lt;/h2&gt;

&lt;p&gt;Thanks for hanging in there! The set up is done. Now, we can fire up the client and watch the policies in action as they are applied at runtime by the API Gateway, for example:&lt;/p&gt;

&lt;p&gt;Open the client, and enter the URL for the managed service &lt;a href=&quot;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&quot;&gt;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What happens first is that the authentication policy is applied and a login dialog is then displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-41.png&quot; alt=&quot;Screenshot 41&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter the username and password (user1/password) that we defined when we created the authentication policy to access the service. The fact that you are seeing this dialog confirms that you are accessing the managed service and are not accessing the service directly.&lt;/p&gt;

&lt;p&gt;When you send a GET request to the service, you should see a successful response:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-40.png&quot; alt=&quot;Screenshot 40&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So far so good. Now, send 10 more requests and you will see a response that looks like this as the gold plan rate limit is exceeded:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/2015-01-09/Screenshot-39.png&quot; alt=&quot;Screenshot 39&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And there it is. Your gold plan has been exceeded. Maybe next time you’ll spend a little more and get the platinum plan!  ;-)&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;Let’s recap what we just accomplished in this demo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We installed apiman 1.0 onto a WildFly server instance.&lt;/li&gt;
  &lt;li&gt;We used git to download and maven to build a sample REST client.&lt;/li&gt;
  &lt;li&gt;As a service provider, we created an organization, defined policies based on service use limit rates and user authentication, and a plan, and assigned them to a service.&lt;/li&gt;
  &lt;li&gt;As a service consumer, we searched for and found that service, and assigned it to an application.&lt;/li&gt;
  &lt;li&gt;As a client, we accessed the service and observed how the API Gateway managed the service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, if you note, in the process of doing all this, the only code that we had to write or build was for the client. We were able to fully configure the service, policies, plans, and the application in the API Manager UI.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next?&lt;/h2&gt;

&lt;p&gt;In this post, we’ve only scratched the surface of API Management with apiman. To learn more about apiman, you can explore its website here: http://www.apiman.io/&lt;/p&gt;

&lt;p&gt;Join the project mailing list here: &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/apiman-user&quot;&gt;https://lists.jboss.org/mailman/listinfo/apiman-user&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And, better still, get involved! Contribute bug reports or feature requests. Write about your own experiences with apiman. Download the apiman source code, take a look around, and contribute your own additions. apiman 1.0 was just released, there’s no better time to join in and contribute!&lt;/p&gt;

&lt;h2 id=&quot;downloads-used-in-this-article&quot;&gt;Downloads Used in this Article&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;REST Client &lt;a href=&quot;http://restclient.net/&quot;&gt;http://restclient.net/&lt;/a&gt; FireFox Add-On - &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/restclient/versions/2.0.3&quot;&gt;https://addons.mozilla.org/en-US/firefox/addon/restclient/versions/2.0.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Echo service source code - &lt;a href=&quot;https://github.com/apiman/apiman-quickstarts&quot;&gt;https://github.com/apiman/apiman-quickstarts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;apiman 1.0 - &lt;a href=&quot;http://downloads.jboss.org/overlord/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&quot;&gt;http://downloads.jboss.org/overlord/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;WildFly 8.2.0 - &lt;a href=&quot;http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&quot;&gt;http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Git - &lt;a href=&quot;http://git-scm.com&quot;&gt;http://git-scm.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Maven - &lt;a href=&quot;http://maven.apache.org&quot;&gt;http://maven.apache.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/&quot;&gt;http://www.apiman.io/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;apiman tutorial videos - &lt;a href=&quot;http://vimeo.com/user34396826&quot;&gt;http://vimeo.com/user34396826&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.softwareag.com/blog/reality_check/index.php/soa-what/what-is-api-management/&quot;&gt;http://www.softwareag.com/blog/reality_check/index.php/soa-what/what-is-api-management/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://keycloak.jboss.org/&quot;&gt;http://keycloak.jboss.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 09 Jan 2015 04:15:00 -0500</pubDate>
        <link>http://apiman.io/blog/introduction/overview/2015/01/09/impatient-new-user.html</link>
        <guid isPermaLink="true">http://apiman.io/blog/introduction/overview/2015/01/09/impatient-new-user.html</guid>
        
        
        <category>introduction</category>
        
        <category>overview</category>
        
      </item>
    
  </channel>
</rss>
