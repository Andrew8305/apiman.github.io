<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title></title>
		<description>The apiman project brings an open source development methodology to API Management, coupling a rich API design &amp; configuration layer with a blazingly fast runtime.  This is the official apiman blog, where we discuss....whatever we&#39;re thinking about!
</description>		
		<link>http://apiman.io</link>
		<atom:link href="http://apiman.io/feed.xml" rel="self" type="application/rss+xml" />
		
		
			<item>
				<title>Setting up your apiman development environment</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				        
				
					<description>&lt;p&gt;For those of you who might be interested in hacking away at some core apiman code,
I thought it might be nice to create a reasonably comprehensive step-by-step
guide.  For the most part everything is straightforward, but there are a copule
of tricks you can use to get up and running fast and to be able to easily
iterate on any changes you make.&lt;/p&gt;

&lt;p&gt;Read on if this sounds like something you want to do!&lt;/p&gt;

</description>
				
				<pubDate>Thu, 04 Jun 2015 05:04:45 -0400</pubDate>
				<link>http://apiman.io/eclipse/development/maven/2015/06/04/dev-environment.html</link>
				<guid isPermaLink="true">http://apiman.io/eclipse/development/maven/2015/06/04/dev-environment.html</guid>
			</item>
		
		
			<item>
				<title>We got the moves like swagger!</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				        
				
					<description>&lt;p&gt;One of the weaknesses we’ve had in apiman until now is that service providers didn’t have
any way to document how to consume their services.  Well that has all changed with version
1.1.3.Final.  Now you can upload a Swagger spec document for your service.  If you do,
consumers will be able to browse your service documentation directly in the apiman UI.&lt;/p&gt;

&lt;p&gt;I think we can all agree that this is a welcome change and really improves the usability
of the system, particularly from the perspective of the application developer (aka the
service consumer).&lt;/p&gt;

</description>
				
				<pubDate>Tue, 02 Jun 2015 05:04:45 -0400</pubDate>
				<link>http://apiman.io/api-manager/swagger/service/ui/2015/06/02/swagger.html</link>
				<guid isPermaLink="true">http://apiman.io/api-manager/swagger/service/ui/2015/06/02/swagger.html</guid>
			</item>
		
		
			<item>
				<title>The JBoss apiman API Manager REST services API</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				        
				
					<description>&lt;p&gt;In this, the third article in our series on apiman, JBoss’ new open source API Management framework, we’ll examine apiman’s API Manager REST services API. apiman’s Management UI utilizes this API in the implementation for all of its user-visible features, and you can also use the same API to automate tasks with apiman.&lt;/p&gt;

</description>
				
				<pubDate>Tue, 19 May 2015 07:00:00 -0400</pubDate>
				<link>http://apiman.io/rest/api/automation/2015/05/19/rest-api.html</link>
				<guid isPermaLink="true">http://apiman.io/rest/api/automation/2015/05/19/rest-api.html</guid>
			</item>
		
		
			<item>
				<title>A great way to test your custom apiman policy!</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				        
				
					<description>&lt;p&gt;If you have tried creating your own custom apiman policy, you may have had a little bit of
difficulty creating useful junit tests for it.  Many policies require various apiman
runtime components to be available.  It can be super annoying trying to use something like
mockito to create mock versions of everything your policy needs.  Even for simple policies
you really just want a quick and effective way to test the implementation within a
reasonably “real world” harness.&lt;/p&gt;

&lt;p&gt;Well you’ve probably guessed by now that I’m about to show you how it’s done!  (OK fine,
how it &lt;em&gt;will&lt;/em&gt; be done in the next release of apiman - 1.1.3.Final)&lt;/p&gt;

</description>
				
				<pubDate>Sat, 09 May 2015 05:07:45 -0400</pubDate>
				<link>http://apiman.io/policy/junit/testing/2015/05/09/policy-testing.html</link>
				<guid isPermaLink="true">http://apiman.io/policy/junit/testing/2015/05/09/policy-testing.html</guid>
			</item>
		
		
			<item>
				<title>Authorization: good god, what is it good for?</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				        
				
					<description>&lt;p&gt;Quite a bit, actually.  :)&lt;/p&gt;

&lt;p&gt;I want to talk about how Authorization currently works in apiman, because it’s
a little bit more loosely coupled than you might expect.  Note that at some
point in the future we’re going to be renovating how policies are defined and
configured in the API Manager UI.  But until then, you can refer to this blog
post for an overview of how to configure Authorization!&lt;/p&gt;

</description>
				
				<pubDate>Fri, 08 May 2015 09:15:15 -0400</pubDate>
				<link>http://apiman.io/authorization/authentication/policy/2015/05/08/authorization.html</link>
				<guid isPermaLink="true">http://apiman.io/authorization/authentication/policy/2015/05/08/authorization.html</guid>
			</item>
		
		
			<item>
				<title>Customizing JBoss apiman Through Policy Plugins</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				        
				
					<description>&lt;p&gt;This is the second in a series of articles exploring API management with JBoss apiman. The first article
was a general introduction to apiman for impatient users where in only 10 minutes we installed apiman,
created users and organizations, and services, policies, contracts, and applications. In this article,
we’ll take the first step toward customizing apiman by creating new plugins to implement service policies.&lt;/p&gt;

</description>
				
				<pubDate>Fri, 06 Mar 2015 05:22:00 -0500</pubDate>
				<link>http://apiman.io/plugins/policies/development/maven/2015/03/06/custom-policies.html</link>
				<guid isPermaLink="true">http://apiman.io/plugins/policies/development/maven/2015/03/06/custom-policies.html</guid>
			</item>
		
		
			<item>
				<title>An Impatient New User&#39;s Introduction to API Management with JBoss apiman 1.0</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				        
				
					<description>&lt;p&gt;Software application development models are evolutionary things. New technologies are always being created
and require new approaches. It’s frequently the case today, that a service oriented architecture (SOA) model
is used and that the end product is a software service that can be used by applications. The explosion in
growth of mobile devices has only accelerated this trend. Every new mobile phone sold is another platform
onto which applications are deployed. These applications are often built from services provided from multiple
sources. The applications often consume these services through their APIs.&lt;/p&gt;

&lt;p&gt;OK, that’s all interesting, but why does this matter?&lt;/p&gt;

</description>
				
				<pubDate>Fri, 09 Jan 2015 04:15:00 -0500</pubDate>
				<link>http://apiman.io/introduction/overview/2015/01/09/impatient-new-user.html</link>
				<guid isPermaLink="true">http://apiman.io/introduction/overview/2015/01/09/impatient-new-user.html</guid>
			</item>
		
	</channel>
</rss>
